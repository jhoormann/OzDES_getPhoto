# ---------------------------------------------------------- #
# -------------------- OzDES_photoPrep.py ------------------ #
# ------- https://github.com/jhoormann/OzDES_getPhoto ------ #
# ---------------------------------------------------------- #
# This code will take the data downloaded from               #
# OzDES_downloadPhoto.py and clean it up into light curves   #
# that can be used for the rest of the OzDES RM analysis.    #
# Unless otherwise noted this code was written by Janie      #
# Hoormann.                                                  #
# ---------------------------------------------------------- #

import numpy as np
import pandas as pd
import OzDES_photoCalc as phCalc
import matplotlib.pyplot as plt

# Load in the names of the sources to be analysed, this is the same file that you will have fed into
# OzDES_downloadPhoto.py.

fileName = "RM_Source_Locations.txt"
RM_names = np.loadtxt(fileName, dtype={'names':('ID', 'RA', 'DEC'), 'formats': (np.float, np.float, np.float)})
length = len(RM_names)

# Define the location/prefix for the tables outputted by the database query, assumes filename is
# location/prefix + ID.tab like is specified in OzDES_download.py.  If you changed the name there you should change
# the name below when the table is loaded in.

dataLoc = "query/DESY6_"

# Set the threshold for what qualifies as an outlier.  I used 0.2 for the OzDES RM light curves and through visual
# inspection I found this worked for our sources.
threshold = 0.2

# When coadding based on nights there is an option to add in the DES photometric calibration error correction from
# Burke 2018. If you want to include this set flag to True.
calibFlag = False

# If you want to plot the resulting light curves set plotFlag == True
plotFlag = True

# Define the output directory where you want to save the lightcurves, the plots will be saved here too
outDir = "data/"

# Some of the newer data tables don't have the SV year data in them.  However you can concatenate them with this new
# data.  If you have two data tables you would like to combine give the filename here and specify what year you want
# to include.  This year needs to be specified in the lists below.  If extraData = False it won't do anything.
# extraData = False.  Assumes data came out in the form generated by this script - so double check that and filename
# structure.
extraData = "old/"
extraYear = ['SV']

# Loop over all sources to make light curves
for i in range(length):

    # save the ID, RA, and DEC for the source being analysed
    ra = RM_names['RA'][i]
    dec = RM_names['DEC'][i]
    sID = int(RM_names['ID'][i])

    print("Analysing " + str(sID))

    # Load in the data table outputted from the query
    # This analysis assumes the table is structured given the column names/order seen below, which you will get using
    # the current settings in OzDES_downloadPhoto.py. If you change what you download be sure to make sure everything
    # here is consistent.

    data = pd.read_table(dataLoc + str(sID) + ".tab", delim_whitespace=True)

    # define array to keep track of any missing data.  I am defining three photometric bands [g,r,i] and 7 years
    # (SV, Y1, Y2, Y3, Y4, Y5, Y6) because of the data I know I will need for the RM analysis.  Feel free to modify this
    # to suit your needs.

    bands = ['g', 'r', 'i']

    years = ['SV', 'Y1', 'Y2', 'Y3', 'Y4', 'Y5', 'Y6']

    # These are (somewhat arbitrary) cuts to define each each observing year
    yearCut = {'SV': range(0, 56400), 'Y1': range(56400, 56800), 'Y2': range(56800, 57150), 'Y3': range(57150, 57510),
               'Y4': range(57510, 57900), 'Y5': range(57900, 58270), 'Y6': range(58270, 60000)}

    # Calculate magnitudes from fluxes/zeropoints and return a dataframe with just the info we need later
    # (MJD_OBS, MAG, MAGERR, BAND).  It also cuts datapoints for which there are issues (bad quality flags, negative
    # zeropoints/fluxes/dates)
    data_mag = phCalc.getMags(data, bands)

    # Find the observing year corresponding to each observation saved in column 'YEAR'
    data_mag = phCalc.findYear(data_mag, years, yearCut)

    # Drop any data points that are outliers.  That means the point is above the average for the year as defined by
    # the threshold constant
    data_mag = phCalc.dropOutliers(data_mag, years, bands, threshold)

    # Sort the data based on band and date, this is the format the other OzDES RM scripts expect and is needed for the
    # coadding function to work
    data_mag = phCalc.sortData(data_mag, bands)

    # Coadd the observations on a given night and, if calibFlag = True, add in the photometric error correction term
    data_mag = phCalc.coaddDates(data_mag, calibFlag)

    # Sometimes the new data tables don't include all the data from previous years.  If you have provided additional
    # data to include in a final light curve file please put it here.

    if extraData != False:
        fileName = extraData + str(sID) + "_lc.dat"
        data_mag = phCalc.combineExtra(data_mag, fileName, extraYear, yearCut, bands)

    # Save lightcurves in a data table but first I am going to drop the YEAR column, we don't need it anymore
    data_mag.to_csv(outDir + str(sID) + "_lc.dat", index=False, sep=' ')

    # Save lightcurve figure if you so choose
    if plotFlag == True:
        fig, ax = phCalc.makeFigSingle(str(sID), "Date", "Magnitude")
        ax.errorbar(data_mag[data_mag['BAND'] == 'g']['MJD_OBS'], data_mag[data_mag['BAND'] == 'g']['MAG'],
                    yerr=data_mag[data_mag['BAND'] == 'g']['MAG_ERR'], fmt='o', color='darkgreen', label='g-Band')
        ax.errorbar(data_mag[data_mag['BAND'] == 'r']['MJD_OBS'], data_mag[data_mag['BAND'] == 'r']['MAG'],
                    yerr=data_mag[data_mag['BAND'] == 'r']['MAG_ERR'], fmt='o', color='darkred', label='r-Band')
        ax.errorbar(data_mag[data_mag['BAND'] == 'i']['MJD_OBS'], data_mag[data_mag['BAND'] == 'i']['MAG'],
                    yerr=data_mag[data_mag['BAND'] == 'i']['MAG_ERR'], fmt='o', color='mediumblue', label='i-Band')
        ax.legend(prop={'size': 22}, frameon=False)
        fig.savefig(outDir + str(sID) + "_lightcurve.png")
        plt.close()

